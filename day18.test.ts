/* === TYPES === */

/* === PREPARE INPUT === */

export const prepareInput = ([input]: TemplateStringsArray) =>
  input.split("\n");

/* === UTILS === */

const last = (a: string[]) => a[a.length - 1];

const OPERATORS = ["+", "*"];
const operatorsSame = { "+": 0, "*": 0 };
const operatorsPlusOverMultiply = { "+": 1, "*": 0 };

const infixToRP = (ops: Record<string, number>) => (infix: string) =>
  infix
    .split("")
    .reduce(
      ([output, stack], token) => {
        if (Number.parseInt(token)) {
          output.push(token);
        }

        if (OPERATORS.includes(token)) {
          while (
            OPERATORS.includes(last(stack)) &&
            ops[token] <= ops[last(stack)]
          ) {
            // @ts-ignore
            output.push(stack.pop());
          }

          stack.push(token);
        }

        if (token == "(") {
          stack.push(token);
        }

        if (token == ")") {
          while (last(stack) !== "(")
            // @ts-ignore
            output.push(stack.pop());
          stack.pop();
        }

        return [output, stack];
      },
      [[] as string[], [] as string[]]
    )
    .map((a, i) => (i === 1 ? a.reverse() : a)) // reverse stack
    .flat();

/* === IMPLEMENTATION === */

const operationsMap: Record<string, (a:number, b:number)=> number = {
  "+": (a, b) => a + b,
  "*": (a, b) => a * b,
};

const evaluateReversePolish = (stack: Array<string|number>, token: string) => {
  const tokenAsNumber = parseFloat(token);

  if (Number.isFinite(tokenAsNumber)) {
    return [tokenAsNumber, ...stack];
  }

  // The token is an operation
  const operation = operationsMap[token];
  const [b, a, ...rest] = stack;

  // @ts-ignore
  const result = operation(a, b);

  return [result, ...rest];
};

const rpn = (tokens: string[]) => tokens.reduce(evaluateReversePolish, [])[0];

/* === TESTS === */

test("Day 18a - test", () => {
  expect(rpn(infixToRP(operatorsSame)("2 * 3 + (4 * 5)"))).toBe(26);
  expect(rpn(infixToRP(operatorsSame)("5 + (8 * 3 + 9 + 3 * 4 * 3)"))).toBe(
    437
  );
  expect(
    rpn(infixToRP(operatorsSame)("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))"))
  ).toBe(12240);
  expect(
    rpn(
      infixToRP(operatorsSame)(
        "((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2"
      )
    )
  ).toBe(13632);
});

test("Day 18a - prod", () => {
  const result = prodInput
    .map(infixToRP(operatorsSame))
    .map(rpn)
    .reduce((a, b) => a + b);
  expect(result).toBe(15285807527593);
});

test("Day 18b - prod", () => {
  const result = prodInput
    .map(infixToRP(operatorsPlusOverMultiply))
    .map(rpn)
    .reduce((a, b) => a + b);
  expect(result).toBe(461295257566346);
});

/* === INPUTS === */

const prodInput = prepareInput`(4 * (3 * 2 + 2) * (9 * 7 * 5 * 4 * 9) * (7 * 7 + 7 * 4 + 9)) + 6 * 4 + 8 + ((6 * 5) * 4 * (2 * 8 + 4 + 7 * 9 + 3) * 2 + 6) + 3
(3 * 2 + (6 + 4 + 3 * 6 * 4 * 8) * 4 + 4) + 2
(9 * 8 * 4 * 8 * (4 + 8 + 7 + 7 * 5) + 3) * 5
((4 + 8 * 3) * (6 * 9)) + (3 + 9 + (9 + 4 * 4 + 8 * 7)) * 9 * (2 * (9 + 9 + 3 + 9) + 5 + 6 + 2 + 6) + 6 * 4
4 * 2 + ((7 * 3 * 7) * 6) + ((9 + 3) + 2 + 7 + 8) * (4 * 9 * (8 * 5) + (3 * 2 + 2) + 3)
3 + 6 + 3 + 9
9 + 6 * 4 * 2 + 7 * 2
(2 * 2) + (9 * 6 * 6 * (8 + 7)) + 3 * 8
(9 * 3 + (5 * 4 + 7 * 9) + 2 + 7 * 9) + (4 * 9 * 3 + 8 + (4 * 8 + 5 + 8) + 8) * 3 + 6 + ((6 * 6) * 5 + 7 + 3 * 9 * 6) + 2
(9 + 5) + 7 * 9 * 7
4 * 6 + 3 + (3 * 7 * 4) * (5 * 9 * (4 + 6 + 9) + 9) + 4
5 * (4 * 9 * 2 * 5 + (7 + 5) * 6) + (7 + 5 * 2 * (8 + 8 * 7 * 2 * 3 * 6) + 9 * 8) + 9 + 5
2 + (9 * 3 + 5 * (6 * 6 * 3 + 5) * 7) + ((3 + 8 + 2) + 4 + 9) * 7 + 6 * 2
3 * 6 + 8 + 6 + (5 * 8 + 8)
4 * 7 + 9 + 4 + 2 * (7 * (8 * 4 * 5 + 5 * 7 * 2))
(2 * 7 * 8 + (6 * 7 + 3 + 8 * 4) + (6 * 7 + 4 + 2 + 3 * 5) * 2) * 8 * 5 + 8 + 7
7 * (5 + 4 + (8 + 7 + 8 * 4 * 7 + 9)) + ((3 + 9 * 2 * 8) + 4 * 8 * 3 + 7 * 2) + 2 + (6 * (9 * 9))
6 * 7 + 9 + 2 + 4 + (4 * 7 * (8 + 5) * 3)
6 + (3 + 4) * (6 + (2 * 4 * 3 + 2) + 9 * 7 + (3 + 3 + 2 * 4 * 6 + 8)) + (7 * (2 + 9 * 9) + (4 * 8 + 7 + 2 * 3 * 2) * 7 + 2 * (5 * 5)) * 7 * (9 * 3 + 3)
(4 * 9 * 3 + 6 + 4 * 8) * 3 + (3 * 6 * 9 * 5 + 2)
(8 * 2 + (5 * 2 * 7 + 5) * 7 + 2) * 3
3 * (4 + 9 * (5 + 3 + 5) + 6 * (9 + 5 * 7))
3 + (2 + (2 * 5 * 6 + 5 * 6) * 4 * 7 * 4) * 5 + 3 * (9 * 5 + (6 + 6 + 7 + 8) + (2 + 3) + 6 * 2)
3 + 8 + 5 * (7 * 9) * 3
6 * 2
5 * (9 + 2 * 8 * 8 + 8) + 5 + 3 + (8 * 5 * 8 + 2 + (8 + 9 * 8 * 5 * 9) + (4 + 7 + 7 + 2 + 7))
(7 + 3 * (4 * 6 * 8 * 3) + 6 * (2 * 7 + 3 * 5 * 5 + 3) * 2) * 2 * 6 + 8 + 9
4 + ((3 * 2 * 7 * 4) * 6 + 6 + 9) * 6 * 7 * (4 * 3 + 4 + 9 + 4)
(6 + 7 * 9 + 5 * 7 + 7) + 2 + 3 * 8 + 4 + (7 * 5)
8 * 3 + 9 + 6
9 + 3 * (8 * (9 * 3 + 9 * 7 * 6) * 6 * (2 * 8) + 2 + 6)
((3 + 5 * 5 + 7 * 6) + 7 * 5 + 2 * 6) + 2 * (8 + 4 + (8 * 4 * 5 + 4 + 3 + 6))
4 + ((3 * 4 + 4) * (4 * 7 * 2 * 6 + 6 + 4) + 4 * 7 + 8 + 8) * 6 * 9
(2 * (8 * 5 + 5) * 8 + 9 + 4 * 4) * (9 * 9 + (5 * 5 + 2 * 5 + 5) + 7 + 7 + 9) * 9 * 2 * 2 * (4 + 4 * 9 * 5)
4 * 8 + (5 * 8 + 9 * 6 * 8 + 7) + 9 + (4 * 2 * 7 + 4 + (3 + 4 * 8 * 8) + 2)
(4 + 6 + 8 + 5 + 9 * 7) + (7 + (6 * 4 + 5) + 5 + 5) * 5
(3 * 4 * 9 + 3) + ((8 * 5 * 3 * 5) * 5 * 7) + (3 + 2 + (9 + 7 + 2)) + (2 * 2 * 9 * 9 * 5 * 8) * 5 + 3
5 * 4 * (4 + 4) + 7
4 + 6 * (6 + 5 * (3 + 3) + 5 + 3) + (3 * 4 * 2 * 9 * (4 * 4 + 7 + 2))
5 * 2 + (4 * (7 + 5 * 4 + 7 + 5 * 2) + 4 * 8 + 4 * 5) + ((7 * 5 + 4 * 2 + 9) * 3 + 8 + (9 + 5 * 2 + 6 * 8 + 3) * (4 * 5) + 4) * 5
((3 + 9 * 6 * 6 + 7 + 6) * 8 * 9 + 9 * 6 * 5) + (2 * 5 + (5 + 2 + 4 * 4 + 8 + 6) + (8 + 2 + 2))
6 + 4 * 9 + (2 * 5 + 6 + 3 * 3 * 4) * 7 + (9 + 6 * 4)
3 * ((6 * 4) * 3 + 6 * (5 + 5 + 6) + 9) * 4 + 2 * (4 + 6) + 9
7 + 7 + 4 + 7 + 2
9 * 4 + 6 * (4 * 2 + 9)
5 + 8 + (3 * 5 * 2 * 6) * 9 + (5 * 4 + 2 + (6 * 3 * 5) * (5 * 8 * 2 * 4 + 2) * 4)
8 * 4 + 7 * 9 * 2
4 + 6 * (9 + 4 + 6) * 7 + 3
6 * 5 * 9 * 9 * (9 * 8) + 7
6 * 7 * 6 * (5 + 7 + (3 * 4) + (8 * 9 * 6 * 8 + 8) * 2 * 4) * 9 + (4 * 8 + (8 * 2 + 7) + (4 + 5 * 4) * 6 + (3 + 4))
(9 * 7 + 3 * 4 * (6 + 8) + 9) * 2
8 * 9 + (6 + 4 * (3 + 7) * 7 + (8 + 2 * 4 * 2 + 8 * 9) * 2) + 9 + 7
(4 + (6 * 9 * 5) + (6 * 7) + 2 + 2) + 7 + 2 * 3 + 5 * 6
6 + 6 * 7 + ((5 * 8 + 4 * 3) * (8 + 6 + 4) * 7 * (7 + 7 + 4 + 7 * 3) * (9 + 8 * 6 * 2 * 3 + 3) + 6)
(3 * 6 + 7 * (2 * 4 + 7 + 6)) + 9 * 7
(3 + 2) * 4 + 3
(2 * 2) + (6 * 2) * 5 * 7 + 3 * 4
9 * 2 * 5 + 2 * (6 + 4 * 3 + 5 * (6 * 3 + 9 + 2) * 4) * (7 * 4 + 6)
(2 + (9 + 2 * 6 + 7 * 9 + 7) + (6 + 5 + 6) * (2 + 4 * 2 * 4) + 2 + 4) * 4 + 3 + 4 * (3 + 3 * 8 * 9 * 7 * 7) * 6
3 * 9 * 3 * (7 + 7 * 2 * 6) * 7 + 8
((9 + 4 * 4) * 8 * 6 * 2) + 6
9 * 5 + 9 + (5 + 2 + 7 + 9 * 2) + (2 + 5) * 2
2 * (9 + 8 + 9 + 5 + 4)
3 * 8 * 5 * 4 * (9 + 5 * 9 + (5 + 3 * 5 * 6 * 2 + 8) + 2 * 2)
((4 * 4 * 9 * 7) * (8 + 9 + 6 * 9 + 3) * 8 + 6 * 7) * 2 + 3 * 3 + 5 * (3 + (6 + 8) + (9 + 4) + 7 * 4 + 9)
5 * (8 + 6 * 8 * 8 * 2 + 4) * 4 * 5 * (6 * 2 * 9 + 6 + 8) * (8 * 6 * 2 + 8 + 7)
9 * 8 + (4 + 2) + 7 * (5 * 5 + 4) * 4
8 + 6 * 7 * (4 + 4 * 7 * (3 * 4 + 9) * (9 + 4 + 3 * 4 + 8 + 8)) * 5 * 4
7 * (9 * 6) + 7
4 * 4 * (3 * 3) * 6 + 8
7 * 6 + 4 * (6 * 3 + 9) * 2
(5 + 2 + (9 * 4 + 4 + 8) * (7 * 6 * 2) * 6 + 7) * (3 + 9 + 7 * 3)
9 * (9 + 8 * 2) * (6 * 3 * 2 + 4)
6 * ((6 * 6) + 2 * 9 * 3 + 4 + 2) + 9 + 8 + (6 * 5)
4 + (6 + 2 * 3 + 4 + 3 * (2 * 3 * 6 * 3 * 8))
9 * (3 + 4 * 7) + 7
7 * (2 + 9) + 7 * 7 + 7
(2 * (5 + 5 * 2 + 9 + 5 + 6)) + 9 * 4 * 3 + 3 + 9
2 * (9 * 9 + 2 + (7 * 8 + 3 * 4 + 5 + 6) * 2) + 4 * 8
7 + (6 + 4 * 8) * 7 + 6 + 7 + 9
4 + (6 + 6 + 9 + 6 * 8 + 6) * 7
6 * ((7 + 5 * 2 * 2) + 7)
7 * 7 + 4 + 4 * (6 * 4)
9 * (2 * 4 + 6 + 6) * (2 + 4 + 3 * 8) * 2 * (7 * 9 * 3 * 6 * (7 * 3 + 8 * 4 + 7 * 4) * (5 + 3 * 6)) * 5
(7 + 8 * 4 * 3 * 8) + 9 + (8 + 3 + 3 + 2) * (3 * 3 + (9 * 9 + 8 + 5 * 3))
2 * (3 + 3 + 8 + 2) + 9 * 9
3 * (2 * 2 + 9 + (9 + 3 * 4) + 5 * 8)
4 + (5 + 6 * 3 * 4) + (4 * 6 + 5 * 4)
2 * ((4 * 9 + 4 * 8) + 4 + 9 + (2 * 4 + 2 + 4)) + (5 + 7 * 7 + 4)
7 + ((6 * 2 + 4) * 2 + (9 + 7 + 4 * 7 + 9 * 9) + (2 + 6)) + 2 * 8
5 * ((9 + 9 + 6) * 5 * 6) * 4
3 * 7 * 3 + 7 + (7 + (5 + 7 + 2) + 7) * 8
7 + 5 * 8 * 2 + (6 * 4 + 2) + 2
8 * (7 * 7 * (9 * 7) * 5) * 9
4 + (4 * (9 * 9) + 9 * 7)
4 + 9 + 8 + 9
(2 * 6 * 7) * 6 * 7
(8 + (2 + 7 + 2 * 5 * 9)) * 4 + 5 + 8 * 9 * 4
(3 * (8 + 3 + 4 + 5 + 6) * 7 * 5 * 8) + (7 + 3 + 4)
3 * 8
4 + (5 + (9 + 8 * 2 * 4 + 8) * (2 * 6) + (2 + 4 * 3)) * 9 + (7 + 4 + 7) + 2 * 5
3 + 4 + 4 * 6 + 4 + 4
(8 * 6 * 5 * 2 * 8 + 6) * 7 * 7 * 2 * 8
(7 * 9 * 8 * 7) * 8 * 6 * 2 * 2 * 6
8 * ((9 + 3 * 7 + 7 + 7 + 4) * 5 + 4 * 3 + 5) * 7
9 * 9 + (2 + (8 + 2 * 9 * 2 * 6) * 4)
2 + 7 + 2 + 7 * 8 + (5 * 8 * 6 + 6 + 8)
2 + ((9 + 8 + 2 + 2 + 7) + 3)
5 + 9 * 9
2 * (6 + (2 + 3 + 2 * 8 * 3) * 7 * 3 * 8) + 7 * 4 + 3 + (2 * 2)
((2 + 7 * 7 + 2 + 3) * 7 + 5) * ((9 * 2 * 5) * 5 * (4 * 8)) + 6 * 7 + 9
(5 + 3 * 6 * 8 + 3 * 5) + 8 + 9 + 5 + 6 + 9
9 + (2 + 5) * (4 + 4 + 9) + 7 * 2
9 * 2 * 6 * (8 * 8 * 5 + 5 + 5 + 8) * (5 * (6 + 4 * 6)) * 2
2 + 5 + (2 * 4 + (7 + 3 + 4 + 5) * 3 + 8 + 6)
((9 + 7) * 6 * 3 * (8 + 5 + 4 + 8 * 7 + 2)) + (8 * (4 + 8) + 9)
((7 * 9 + 3 * 7 * 8 + 2) * (7 + 6 + 7 + 5 * 4 * 5) + 3 * 8) * 2
((2 + 9 * 6 * 9 * 6) * 5) + 3 + 6 * 6
7 + (8 * (7 + 7 * 2 * 7 * 7 * 7) + 3 * 3 * 4 + 3) + 6
6 * 6 * ((5 * 7) + 7 * (2 + 7) * (7 * 8 * 3) * 8)
(9 + (4 * 5 * 9)) * 7 + 4 * 8 + (5 + 9 * 2 + (8 * 2) + 6 + 7) * 5
((7 * 3) * (4 + 4 + 8 * 9 + 8 + 5) + 4 + 3) * (7 + (9 * 6 + 4 + 3 * 5) * (7 + 4 * 4) + 4 * 7 + 2) * 4
4 + (5 * 2 * 6) * 2 * (9 + 5 + 6)
5 * ((6 * 9) * (6 + 9 + 6) + 8 * 8 * 9) + 4 * 9 * 6 + 5
((4 * 4 * 5 + 9) * (7 + 6 * 2 * 9 + 3)) + 5 * (5 + 3 * 3 + 8 + 5) * 8 + 2
4 + 4 * (7 + 9 + 4)
(3 + 5 + (6 + 5 + 4 + 8 + 9) + 5) + 4
5 * 9 + (5 * 6 * (5 + 9 + 4) + 8 * 7 + 9) * 9
(9 * 7 * 2) * 9 + (5 * 7)
((2 + 2 + 7 * 7 * 8 + 3) + (7 * 9 + 4 * 5 + 8) + 4 + 8 * 2) + 9
9 * 8 + (7 + 6 * (4 + 5 * 9 * 2 * 8 + 6) * 4 + 3) * 2 * 2 + 6
6 + 2 + 6 + 5 + (5 * 2 + 7 + (9 * 8) * 9 + 7)
6 + (9 * 5 + 8 * 7 * 7 * 2) * 6 * 2 + (4 * 3 + 5)
(6 * 8 + (7 * 5) * (9 + 7 + 5 * 9 * 5 + 5) + (7 + 9 * 8) + 5) * 3 * 6 * 7 + 5 + 4
4 * 8 + 6 + (3 + 3 * (2 * 4 * 9 + 8 * 3) + (9 + 4 * 2 + 9 + 5 * 4) + 4 * 9)
(4 * 7 + 2 * 2) * 9 + 5
(3 * 7 * 9 * (7 * 8)) + (5 * 3 * 7)
(6 * 6 + 7 * 9 + 6) + 3 + 4 * 6 + (4 + 9 + 4)
2 + 8 * 7 + (4 + 3 + 7 + 8 + 4 * 6) + 2
2 * 9 + (3 + 8 + 7 * 8 + 7 * 6) + 3 * ((5 * 2 * 3 * 8 * 5) * 4 + 8 + 4 * 4 * 8) * (9 + 2 + 9 * 6 + 7 * 3)
(5 + 5 + 6 + (2 * 8)) + 2 * 3 + 4 + (7 + 5 + 7 + 5)
(8 * (5 * 4 + 9 * 8) * 5 * 7 + 9 * 7) + 4 * 2
(9 * 3) * 4 + 9 * 2 + 2 * 6
3 + 7 * 8 + (4 + 9 * (5 * 8 + 9 * 3) + 5 + 2 + 6)
(2 + 9 + 6 + (5 + 7 * 8 + 8 * 3 + 6)) * 3 + 6 + (6 + 7 + (8 + 7 + 4 * 7 * 4 + 9) + 2)
(3 * 6 * 4 * 3 + 6 + 5) * (7 + (7 * 5 + 8 * 6 + 2 * 7) * 7 * 6 * 9) * 2 * (9 * 7 + 4 + 9)
3 + 7 * 4 + (7 + 9 + 3) + (2 + 9 * 8)
(5 * 9 + 8 + 3 + 8) * 4 + 4 + 9
((2 * 5 * 6 + 5 * 4 * 7) * (6 * 6) * (2 + 9 + 6 + 5 * 8 * 2)) + 3 + 3
(7 + 5 * (5 + 9 + 7 * 3 + 5) * 4 + (5 * 2 * 5 + 6 + 6 + 4)) + 8
(7 + (8 + 9 + 3) + 9 + 7 + 2) * 2
4 + 6
(6 * 8 * (2 + 6 * 9 + 4 + 4 * 9) * (7 * 9 + 5 * 8 + 8) * 7) + 6 * 4 + 9
3 + (6 * 7 + 8 + 7) * 6 * 8 * 4
5 + 4 * (6 + 7 * 8 + 2 * (6 * 8 * 3 * 6 * 5) * 3)
(6 + 6 + 4 + 6 + 5) + 9 * 7 * 8 * 8 * 2
6 * 5 + (3 + 2 * 2 + 9 + 6 * 7) * 9 + (7 + 3)
5 + (8 + 8 * 6 + (5 + 5) + 4)
(5 * (8 * 8 * 9 * 3 * 9 * 3)) * 9 + 5 + (3 * 8)
2 + (6 * 9 * 5 + (8 * 2 + 6 + 6 * 7)) * 3 * 4 * 8 * 9
9 + (2 + 8 + 8) + 9 + 3 + 5
4 + 6 + (7 * 6 + 5) + (5 + 4 * 4) + (6 * 8)
3 + 5 + (6 * (7 * 2) + 4) * 5 * 6
9 * 8 + 6 + 5 * (8 * 6 + 4 * 3 + 4)
9 + (2 * 3)
7 + (7 * 2 * 7 + 2) * 6 * (9 + (6 + 2 * 3 * 5 * 4)) * (3 + 7 * 8 + 2 + 2 * 7)
4 * (9 * 5 * 3 + (5 * 3 * 9 * 4 * 8 + 5)) * 8 + 9 * 4 * 7
8 + 7 + 3 + (5 + 9)
(9 + 9) * 7 + 5 + 3 + (9 * (4 * 9 + 2 + 4 + 9 * 7) + (5 * 3 * 2) * 8 + 6 + 8)
5 + 8 + (6 * 4 * 6 * 7) + 4 + 5 * 8
7 + 4 + (5 + 2 + (8 * 9 + 5 * 5 * 6) * 2 + 8) + 5 * 6 + (5 + 4 + 6 * (2 + 4 + 7 + 5 * 9 * 8) + 9 + 6)
8 + 8 * 4 * 3 * 8 + 7
((4 * 8) * 9 + 7 * 8 * 3) + (4 * 2 * 5 + (2 + 9 + 4 * 6)) * 6
(7 * 5 * 2 * 3) + (7 + 8 + 6 * 3 * 3) * 8 * (7 * 6 * 3 + 2) * 7
(5 + (6 + 6 + 5 * 6) * 7 * 4 + 9 * 2) * (5 + 5 * 7 + 8 + 8) * (2 * 7) + 3
4 + (5 * 4 * 9 + 3) * (2 * 6 + 2) + (9 * 6) * (3 + 6 + 2 + 5)
(6 + (4 + 5 * 6)) + (6 + 4 * 4) + 5 * (7 + 5) * (5 * 4 + 2) + 9
6 * (4 + 2 * 6 * 9 * 2) + 4 * 9
9 * (9 + 3 * 8 + 2)
((8 + 4 * 7 + 3 + 8 * 5) + 7 * 4 + (6 * 2 * 5 * 9 * 2 * 7)) * 2 + 5 + 9 * 2
9 * 5 * 5 * 5 * ((6 + 4 + 4 + 3 + 9) * 4 * 7 + 9 + 8 + (8 * 8 + 6 + 8)) + 6
(4 * 6 + 3 + 2) * 9 * 4 + 4 * (5 + 6 * 9)
7 * 4 * (7 + 6 + 4 + 7 * 2) * 5 + 4
(4 * 3) + 7 + 9 + 9 * 7 * ((3 + 2 * 4) * (2 + 4 + 3 * 4 * 4 + 4) + 8)
3 + (6 * 7 + 7 * 5 * (9 + 2 * 5 + 9 * 9 * 8) * 9) + 5 * 4 * 3 * 8
8 * ((8 * 8 + 2 + 6) * 3 * 9 * 9)
7 * ((9 * 7 + 5 + 3 * 5 + 4) + 9) * 3 * (9 * 5) * 8 * 4
7 + 3 * 4 * 8 + 4 + (6 + 3 + 2)
9 + 4 + 5 * 9
7 * (2 * 8) * 2 * 7
3 + 8 + (5 + 3 + 4 * 4 * 9)
7 * (5 * 2 * (7 + 5) + 5) + (5 + 2 * 6 + 9) * 4 * 2 + (3 * 3 * 8 * 9 * 3 * 6)
5 * (2 + 9 + (5 * 8 + 5 * 6) + 2) + 7 + 9 + 3
9 * (8 * 3 + 7 * 4 + 6) * 7
4 + 2 * 6
(2 + 7) * ((9 + 5 * 5 * 5 + 3) * (2 * 3 * 3 + 7)) + 4 * (9 + 8)
(7 + (9 + 9)) * (8 * (7 * 5 + 6 + 4 * 5) * 2 + 2)
2 + (4 + 5 * 9 + 9 * (7 * 3 + 6 + 6 * 2) + 2)
7 + ((9 * 6 + 7) + (5 + 2) * 5 + 6 * 7) + 9 + (7 * 3) * 6
(9 * 7 * 7 + 7 * (9 * 7 + 3)) + 3
5 + 5 + (9 * 5 + 7) + (3 + 8 * 9 * 2) * 3 + (3 + (2 + 2 + 7 * 2 * 4 * 9))
3 + (5 * 4 * (7 + 4) + 2 * 5 + 9) + (3 + (2 * 5 * 3 * 9 * 3 + 5) * (8 * 7 * 2) + 3 * 6 + (7 * 3))
4 + ((2 * 6 * 2 + 3 * 5 + 5) * 7 + 2 * 4 * 3) * (5 + 7 + 7 * 8 + 8) + 6
6 + 6 * (2 + 8 + 2) * 4 + 3 + 6
6 * 5 + 7 + 5 * (2 + 3 * 6 + 9 + (7 + 6) + 2)
4 * 3 + 9
7 + 3 * (2 + (2 * 6 * 3) * 9 + 6) * 8
(9 + (5 + 7 * 2 * 9 * 7) + 7) + 3 + 3 + (3 + 3 * 7 + 2 + (6 * 4 + 5 * 7)) + 5
(8 + (8 + 6 + 9) * (6 + 2 + 4) * (7 * 5) * 3) + 3 + 5
2 + ((6 + 6 * 3) + 6 + 3 * 2 * 7) + 7 + 8 + 5
2 * 7 + (7 * 2) * ((4 + 6) + (3 * 7 * 3 * 4 * 7 * 6) + 2 * 7 + 5 + 5)
6 * 3 * (7 * 6 + 4) + ((5 + 7 * 6 + 6 * 9) + 6 * 8 * 3)
4 + (3 * 8 * 7 + 3) + 4
3 * (8 + (8 * 2 * 5 + 9 * 3 * 6) * (3 + 4)) + 6 + 8
2 + 3 + ((3 + 8) + 9 + 2 * (4 * 5 + 7 * 7 * 5) * 5) + 7 + (3 * 2)
(2 + 4 + (2 + 7 * 8 * 7) + 4 + 5) * 6 * 5 * 9 * 2 * (6 * 7 + 2)
3 + (2 + 7 * 2 * 8) * (9 * 9 + 4 + 5 * 7 + 3) * 9 * (7 * 5 + 5 + 7)
(8 + (6 * 9) * (2 * 7)) + 4
(6 + 6) * (7 + 6 + (8 * 7 + 8 * 3 + 5) * 4)
5 * (2 + 9 * 4 * 9) * ((4 + 3 + 4 + 9 * 3) + (3 + 5 + 9 + 6 + 5) + 3 * 6 * 8 * 4) + 5
2 + 8 + 4 * 3 + 9 + (7 * 9)
6 + 5 + (6 * (9 * 5 + 3 + 4 * 4) * 6 * 7 * 9 * (7 * 4 + 2 + 3)) * 3
3 + (9 + 2 * 2 + 5) + 5 * 2 * 3 * 6
2 + 8 * ((2 + 8 * 7 * 6 * 7 + 9) + 6) * 8 * ((6 + 9) * 8 * 5 + 9 * 3 * 8)
6 * 9 + 8 * 4 + 8 * (9 * (6 + 6) * 2 * 4 * (7 + 4) * 5)
((9 * 8 + 2 * 5) * 7) * 8 + 6
7 * 8 + 2 + (7 + 7 * (9 * 9 + 3) * 7 * 8) + 6 * 3
(6 + 4 + 9) + 4 * 8 * 7 + 2 + 3
9 * 2 * (2 + 9 + 2 + 4 * 7 * (3 + 9 * 8 * 5 * 7 + 6)) + (6 + 3 * (4 + 4)) * 4
9 + 4 * 3 + 3
4 * 9 + 5
(5 + 8 * (4 + 6 + 4 + 3)) + 6
(9 * 6 * (5 + 2)) * ((4 + 9 * 5 * 2 + 4) + 9 * 7)
3 + 6
4 + 8 + 3 + (4 * 5 + 9 + 2 + 3) * 9 * (8 + (2 + 8 + 8 + 2 + 5) + 8)
8 * (8 * 9 * (7 * 8 * 7 + 2) * (8 + 9 * 6 * 3 + 2) * 2) + 7 + 6 + 9 * 5
8 + (2 * (4 * 3 + 9 + 8)) * 7 * 2 + 4 * (6 * 4 + 2 + 7 * 4 + 4)
6 * (9 * (6 * 7 * 6 * 7)) * 4
8 * (8 + 5 * 5 + (3 * 7 * 7)) + 7 + (5 * 2 + 8) * 2
7 + 5 * 2 + ((4 + 6 + 5 + 9) * 4) * 2 + ((7 * 6 * 2 * 8 * 8) + 3 * 4 + 4 * 9 + 7)
(7 * 8 * 9 * 6) + 6 * ((6 + 2 + 2 * 6 * 4 + 6) * (4 * 2 + 8 + 4 * 6 * 3)) * 2 * 2 + 7
(3 * 6 + 6) + 3 + 6 * 7 * (3 + (9 + 5 * 7 * 3 * 2 * 3))
9 * 5 + 4 + ((6 * 6 * 8) * 2 + 9 + 9) * 4 + (9 * (4 + 4 * 4 + 9 * 5))
3 * 3 * 3 + ((8 + 7 + 2 * 3) + 4 * 8)
9 + (3 * 3 * (4 * 5 * 5) * 8 * 8 * (6 * 5 * 3 * 9))
4 + 3 + 5 * 6 + 9
4 + 9 * 7 + ((2 + 8 + 2 + 8 * 9) + (4 + 7) + 9 + 5 * 7) * 8 + 8
(3 + 6 * 6 * 3 + 6 + 6) + 7 * (9 * 7 + 5) * 7
(9 + 6 + 2 * (8 * 3 * 3 * 7) * 8) + 3 + 3 * (9 * 7 * 5) + 4 + 3
4 * (7 + (2 * 3 + 9 * 3 * 6 + 4) + (9 * 4) + 2 + 9) + 5 + 5 * (9 + 3 + 6 * 9 + 5)
8 + (6 + 4 + 3)
((3 + 2) + 5) + 5 * ((3 * 3 + 8 + 9 + 5 + 8) + 5 + 9 * (9 * 3))
8 * 2 + (6 + 8 * 4 + 7) * 8 + (4 * 2 + 4 * 3)
6 + (8 + 5 + (2 * 6 + 9 + 7 + 2 + 4) + (4 + 8 + 3 * 2) * 2) * 5 + 7 + 5 * 4
3 * 2 + (5 + (3 + 4) * 7)
4 * (9 * (4 + 5 + 8) * 9 * (4 + 8 + 4) * 9) * 2 * 3 * ((2 * 7 + 6 * 8 + 6) * 6) + 8
(5 + 2) + 4
8 + 6 * 4 * 9 + (5 * 4 + 4 * 5 * 3) * 9
(5 * (8 + 4 * 6 + 5)) + 7 * 8
3 + (2 * 3 + 5 * 6 + 5 * (9 + 4 * 4)) + (5 + 7 + 7 + 5) * 3
6 * (4 * 8 + (7 + 7 + 8 * 8 + 7 + 4) + (3 + 7 * 6 + 5) * 3)
5 * 3 + 3 * ((5 + 4 * 4 * 8 + 8 + 8) + 3 + (7 + 2 * 7 + 7 + 9) + 8 * 3 * 7)
(2 + 7) * 3 + 6 * 8 + (8 * 5 * 5 + 9 + 4 + 6)
3 + 9 * 4 * (5 * (3 * 2) * 7 * 8 + 7 * (9 * 2 * 4 + 2)) + 5 + (6 + 7 + (6 * 5 + 5 * 4 + 9) * 5 * 9 + 8)
6 + 4 + (9 + 5 + (4 + 4 + 4 * 9 * 7 + 6) + 9) * 8 * 4
5 * 5 * (3 * 7 * 3 * 4 + (3 * 2)) * (2 + (2 * 4 * 6 + 2 * 5 * 4))
3 + 3 + 5 + (2 + 9 + 5 * 8 * 9)
((2 + 3 + 9 * 7) * 2 * (3 + 4 + 2 * 3 * 6 * 7)) + 2 + 2
(9 * 5 + 4 * (2 * 3 + 9) + (3 + 2 + 3)) + 4
(8 * 4) + 3 + (9 * 2 * (6 + 2 * 7 * 7) * 3) * 3 * ((6 * 2 * 3) + (4 * 7 + 6 * 9) + (4 * 9 * 5) + 7) * 3
9 + 6 * 9 + 7 + 3 * 9
6 * 2
8 * 8 * 3 + 4 + 8 + 3
9 + (7 + 6 * 9 * 2 + 8 * 3)
8 * 6 + 3 * ((2 * 9 + 6) + 5 * 9 * 9 + 7) + 6 * (2 * 4 * (4 + 6 * 4 + 8 + 4) * 9 + 9)
8 + ((5 * 6 * 9 * 6 + 6 + 2) + 4) + (9 + 6 * 5 * 6 + 6) + 7 + (7 * 7 + (3 * 3 * 4) * (6 + 3 + 3 + 7 * 3))
((8 * 6 + 3 + 8 * 4) * 8 + 8 * 4 + 2) * 8 * 2 + 8 * 8
7 + (3 * 6 * (8 + 6 + 6 * 6)) + 8 + 4 + 9
6 + 9 + (7 + 3)
9 + 5 * 9 * (2 + (7 * 5 + 5 * 4)) * 8 + 6
(8 * 3 + 8) + 5 + 9 * 6
4 * 7 * 4 * 7 + 9
3 * 5 * 3 + (9 + (9 + 3 + 6 + 8 * 2 + 9)) * 2 + 9
3 + 6 * (7 * 4 * 3 * 5 * 8) * 8
2 + ((2 * 3 + 8 + 4) * 8 * 2) + 3 + 8 * 7
7 * (9 + (6 + 3) * 2 * 4) * 5
4 + (5 * 3 + 4 + 8 * 5 + 9) * 3 * 2
6 + 8 * (8 * 8) * 6 * 3 + 3
7 + (6 * 9 + 4 + (7 + 6) * 5 * 9) * 2 + (3 + 6 * 5 * 6) * 3
(5 * 7 * (5 * 4 * 9 * 9 + 7 * 7) * (9 * 6)) + 6 + 9 * 8
(2 + (2 * 9 + 2 + 6) * 4 * (7 + 5 * 6 * 6)) * (3 * 3 + (5 * 8 + 9 * 3 * 3) * 4 * 6 + 3) + (2 + 2 * 7 + 2 * 8) * 6 + 6 * 4
3 * (6 * 2 * 9 + 9 * 2 * 4) * (8 + 5 * 9 + 5) * 2
(4 + (2 * 4) * 6 * 5 * 7) + 5 * 9
(5 + 8 * 7 + 6) + 5 * 9 * 5
7 + 2 * ((8 + 5) + (4 * 9 + 2 + 3 * 4 * 8) * 3) + 3
(5 + (6 + 9 * 9 + 4)) + 6
7 + 5 + 3
2 + (9 * (7 + 2 + 8) + 3 * 7) + 7
3 + 2 * (4 * 9 * 2 + 4 * 6) * (5 * 6 + 9 + 3 + 2 * 7) * (7 * 6 * 7) + 5
(4 + (2 * 7 + 5 + 7)) + 4 + (3 * 2 + 5 + 3 * 2) * 7
9 * 9 * 5 + ((9 * 5) * 6 + 2 * 5) * 6 * 6
(8 + 9 * 6 + 2 + 8 + 7) + 9 * 4 * 9
2 * 4 + 6 + (3 + 7 * 9 * 4 + 8) + 3 + 6
(4 + 7 * 7 + 3 + 2 + 7) + 2 + 6
5 + 6 * 2 * (2 * 2 + 5 + 6) + 4
6 * ((3 + 7 * 7 + 6) + 6 * (6 * 3 + 3 * 4 * 9) + (2 * 7 + 3) * 7) * 4
7 + 6 * 4 + ((9 * 4 * 3 * 3 * 4) * 4 * 9 + 5)
8 + 5 * ((8 * 5 + 7 + 6 * 5 + 5) * 3) * 4 + 9
8 + 5 * 8 + 5 * (8 + (2 * 6 + 6) * 5)
2 + (6 + (4 * 7 + 4 + 7)) + 2 + 5
4 * 3 * 8 * 8 * 5 + (7 * 6 * (3 * 5 + 3 + 7 + 2 + 6))
(6 + 7) + (5 + 9 + 2 * (9 + 5 * 3 * 8 * 4)) * (9 * 9) + 2 + 2
4 + 5 + 9 + (4 * (3 + 9 * 7 + 8 * 9 * 8) * 9 + 8 * 2)
(4 * 9 * 7) + 3 * 9 + 6 + 3
4 + ((2 + 7 + 4 + 9) + 3 + 7 * 4 * 7)
(9 * 3 + (8 + 9 + 5 * 9 + 7) * 7 * 2 * (5 + 4 * 2 + 5 * 3)) + 5 + 9 * 2 * 9 * 4
(4 * (5 * 8 + 7 * 4 + 3 * 4) + 5 * 8) * 2 * 3 * (6 + 7 + (2 + 5 + 4 + 9) + 6 + 5) * 8
3 + (3 * 8 * 9 * 6 + 6 * 7) * 5 * 4 + 9
5 * 2 * (6 + 5 + 3 + 5) + 5 * ((8 + 4 * 7 + 8 * 9) * (7 + 3) * 8 + 4 + 9) * 4
6 + 5 * (5 + 6 * 4 * 5 * (4 + 3 * 2 + 6 * 5 + 3)) * 3
3 * ((2 * 9 * 5 + 7 + 4) + 6 + 3) * 2
9 + 5 * 6 * 7 * (2 * 8 * (2 * 7) * 5) * 7
(3 + 5 + 4) * 4
6 + 2 * (7 + 9 * 4 + 4)
(5 + 8 * 4 + 6) * (6 * 8 * 6) + 8
6 * 7 * 9 + ((8 * 2 + 8) + 6 + 7)
3 + (2 + 5 + (6 * 4 + 9) + 2 * 2 + 9) + 8 + 8 + 8 * 9
((2 + 7 + 6 * 2 + 8) * (7 + 8 * 6) * 9 * (5 * 3) + 9) + 6 + 8
4 * 6 + 4 * (2 * 8) + 9 + 8
(6 + 7 + 6 * 5 * 3) * (3 + 2 + 8 * 8 * 5) * (3 * (7 * 6) + 7 * (2 + 7 + 6) + 6 + 9) * 6 + 8 + 3
4 * (8 + 2 + (2 + 7 * 8 + 6 + 8 * 9))
((5 * 3 + 8 + 4 * 5 + 2) * 5 * 7 + 6) + 7 + 6 + 7
(7 + 6 + 9 + 6 * (7 * 8 + 9 + 4)) + (6 * 6 * 8 * 5 * (7 * 8)) * ((8 + 6 + 8 + 4) + (9 * 6) * 6 * 7) * 4 * (9 * 4 + 9 * 3 + (7 + 2 + 7 * 2 * 8 * 2) + 8) + 5
5 + (4 + 3) * 5 * 9 * 2 * 2
(2 + 6 * 7) * 5 * 9 * (7 + (2 * 7))
5 + 6 + ((9 * 3 * 9 + 7 + 9) + 8 * 6 + (8 * 3 * 3 * 8 * 5)) + 2
((4 * 5 + 8 * 7 * 2 * 7) * 5 * 5) + 6 + 3
(5 + 3 + 8 * (6 + 8) + 2 * 9) * 9 + 7 * 7 * 6
9 + 7 * 6 * 5 + (8 * (5 + 4 + 3 + 3) * 9 + 5 + 7 * 6) + 6
3 * 6 * 6 + (2 + 5 + 9 * 6 + 3 * 4)
(9 * 2 * 5 + 9 + 4 * 6) + 3
(4 + (4 * 4) * 2 + 4 + 6 + 5) * 5 * 3 + 4 + 9
((5 + 4) + 2) * 5 * (5 + 2 + 8 + 7 + (3 * 7))
(4 * (4 + 6 * 5) + 5 + 7 + 2) * (2 * 6 * (3 * 4 * 4 + 8))
8 * (3 * 5 * 6) + 5 + 8
6 * (2 * (9 * 6 + 3 * 3 + 9) * 3 + 4) * 7
(2 + 8 + 9 + 6 + 7) + 8 * (4 + 9 + 9 + 4 + 9 + 8)
2 + 4 * ((3 + 2 + 7) + (9 + 9 + 6) + 2 * 4 * 8) * 5
5 + 7 + 8 * 9 + ((6 * 3 * 6) * 6 * (8 * 8 + 5) + 4 * 9 * 9)
6 * 7 * (2 * 3 + 4) + 4
((4 * 9) * (7 + 9 * 7 + 9 + 9 * 8) * 9 * (9 * 7 * 5 * 4 + 7) + 4) + 2
(6 * 4 * (3 + 4 + 2 * 6 * 2) * 2 * 2) + 6 + 3 * 8 * 3 * 2
2 + 9 * 3 * (6 * 8 + (7 * 9 + 8 * 7) + 8 * 3 + 2) + 4
(9 + 6 + (3 + 3 + 2 * 9) * (5 * 9)) + 8 + 2
(7 + 9) + 3 + ((8 * 5 * 9 + 8) * 6 + (5 * 8 * 9)) + 3 * 8 * 7
3 + 3 + (3 + (4 + 2)) + 5
7 + ((5 * 6) * 4 + 8 + 4) + 7 * (3 * 5 * 3 * 7)
2 * 6 * (8 + 6 * 9) + 8 + (8 + 7 + 5 + 3) * 5
9 + ((4 + 2 + 8) + 2 * 2 + (5 + 2) * (4 + 3 + 4 * 2 * 3 * 5)) * 9 + 8 * (9 * (3 + 3 * 7 + 2 * 3 + 9) + 6)
8 * ((4 + 4 * 4) * 8 + 4 + 9 + 8 * 6) * (8 * 7 * 6 + 3 + (4 + 2 * 6 + 5 * 7)) + 9 * 2
3 * 6 * (4 + 9 * 6 * 8 + (8 * 6 + 7) + 2) * 8
8 * 6 + 8 * 4 * 4
(7 * 6 + 8 * 8) + 5 * (7 * 2 * (9 * 4) + 3 * 4) * 3 * (9 * 9 * (7 + 4 + 5 * 9 * 6 + 6) * 7) * 9
4 + (3 + 4 * 8 * 7 + 7) * 9 + 2 + 6 + 4
2 + 8 * 3 * 4 * (2 * 5 + 7 + (2 * 4 + 4 + 4) + 3 * 2) + 7
9 + 2 * 3 * 3 * (5 + 4 + 7 + 7 * 2 + 2) * 4
7 * (3 + (2 * 7 + 5 + 7 + 3) * 6) * 7 + 3 * 4
8 + 3 * 8 + ((5 * 3 + 6 * 9 * 6 + 2) + 5 + 3 * 5 * (2 + 8 * 7 * 9 * 7)) * 6
((6 + 9 + 8) * 2 + 8) + 6 * 7 * 9
(2 * 6 * (2 + 9 * 5 * 8 + 4) + 7 * 8 + 9) + 5 * (2 * 3 * 6 + (6 + 5 * 9 + 8))
8 + 5 * 5 + (9 + (7 * 2 * 2 + 8 * 4 * 2)) + 3 + (9 + 3 + 2 + 5)
9 * 2 + ((8 * 5 + 8) + (5 + 2 + 4) * 3) * (2 + (5 * 4 * 7 + 4 * 4) + 7) * 9 + 4`;
